////
// Grid : Base Styles
////

// Generate a fluid-width page container whose max width
// is specified by the $gird-container variable. The page
// container is centered within the body.
@mixin container {
  transition: width 0.3s ease-in-out, height 0.3s ease-in-out;
  max-width: $grid-container;
  margin: 0 auto;
  padding: 0;
}

// Generate a flex-box grid to contain cells.
@mixin grid {
  @include xy-grid();
}

// Generate a responsive cell whose sizes are specified
// by the $sizes parameter. The $sizes parameter is a map
// containing a size for 'small', 'medium', and 'large'
// display sizes. The size can also be given as a single
// number of columns used for all display sizes. An optional
// margin-type gutter width can be specified and will be
// evenly distributed along the left and right of the cell.
@mixin cell(
  $sizes: 12,
  $gutter: 0
) {
  transition: width 0.3s ease-in-out;
  
  // Set the margin-type gutter width.
  @if $gutter > 0 {
    @include xy-gutters($gutter, 'margin');
  }

  // Set width for all breakpoints.
  @if type-of($sizes) == 'number' {
    @include -cell-width($sizes, $gutter);
  }

  // Set width for specific breakpoints.
  @else {
    // Small dispaly cell size.
    @if map-has-key($sizes, 'small') {
      @include -cell-width(map-get($sizes, 'small'), $gutter);
    }

    // Medium display cell size.
    @if map-has-key($sizes, 'medium') {
      @include breakpoint(medium) {
        @include -cell-width(map-get($sizes, 'medium'), $gutter);
      }
    }
    
    // Large display cell size.
    @if map-has-key($sizes, 'large') {
      @include breakpoint(large) {
        @include -cell-width(map-get($sizes, 'large'), $gutter);
      }
    }
  }
}

// Sets the width for a cell accounting for a margin-type
// gutter, if a gutter width is specified.
@mixin -cell-width($size, $gutter) {
  $cell-width: cell-size($size);
  @if $gutter > 0 {
    width: calc(#{$cell-width} - #{rem-calc($gutter)});
  }
  @else {
    width: $cell-width;
  }
}

// Calculate the percentage size of a cell.
@function cell-size($size) {
  @return xy-cell-size($size);
}


.container {
  @include container;
}